@model IEnumerable<SellingBook.Models.BasicModels.Product>
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["HomeTitle"];
}

<style>
    .product-card {
        width: 18rem;
        border: 1px solid #ddd;
        border-radius: 8px; /* Subtle rounding */
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background: #fff;
    }

    .product-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .product-card img {
        width: 100%;
        height: 300px;
        object-fit: cover;
        border-bottom: 1px solid #ddd; /* Cleaner separation */
    }

    .card-body h5 {
        font-size: 1.2rem;
        font-weight: 600;
        color: #333;
        min-height: 48px;
    }

    .price-label {
        font-weight: 500;
        color: #555;
    }

    .price-amount {
        color: #0d6efd;
        font-size: 1.1rem;
        font-weight: 700;
    }

    .add-to-cart-btn {
        background-color: #0d6efd;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 6px; /* Only the button rounded */
        transition: background-color 0.3s ease;
    }

    .add-to-cart-btn:hover {
        background-color: #084298;
    }

    .card-body {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 230px;
    }
</style>

<section class="py-5">
    <div class="container px-4 px-lg-5">
        <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center">
            @foreach (Product product in Model)
            {
                <div class="col mb-5 a-product-@product.ProductId" 
                        data-price="@product.ProductPrice" 
                        data-cartQuantity="1">
                    <div class="product-card">
                        <a href="/Customer/Product/Display/@product.ProductId">
                            <img src="@product.ImageUrl"
                                    class="image-zooming"
                                    alt="@product.ProductName">
                        </a>
                        <div class="card-body p-3">
                                <a href="/Customer/Product/Display/@product.ProductId" style="text-decoration: none;">
                                <h5>@product.ProductName</h5>
                            </a>
                            <div class="d-flex align-items-center">
                                <span class="price-label">@Localizer["PriceLabel"]:</span>
                                <span class="price-amount ms-2">@product.ProductPrice.ToString("#,##0") Vnđ</span>
                            </div>
                            <button class="add-to-cart-btn mt-3" onclick="onClick(@product.ProductId);">
                                <i class="bi bi-cart-fill me-1"></i> @Localizer["AddToCart"]
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>


<script>
    async function onClick(productId) {
        const productElement = document.querySelector('.a-product-' + productId);
        const cartQuantitySelector = document.querySelector(".cart-quantity");

        if (!productElement) {
            console.error(`Product element for productId ${productId} not found`);
            return;
        }

        const cartItemObj = {
            ProductId: productId,
            CartItemQuantity: parseInt(productElement.dataset.cartquantity) || 1,
            CartItemPrice: parseFloat(productElement.dataset.price) || 0
        };

        const onSuccessCallBack = async (response) => {
            try {
                const parsedData = await response.json();
                if (parsedData && cartQuantitySelector) {
                    cartQuantitySelector.style.display = "block";
                    cartQuantitySelector.innerText = parsedData.cartQuantity;
                }
                console.log("Cart updated:", parsedData);
            } catch (parseError) {
                console.error("Failed to parse response:", parseError);
            }
        };

        const onFailedCallBack = (error) => {
            console.error("Add to cart failed:", error);
            if (cartQuantitySelector) {
                cartQuantitySelector.style.display = "none";
            }
        };

        await addProduct(cartItemObj, onSuccessCallBack, onFailedCallBack);
    }
</script>
