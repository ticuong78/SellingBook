@model ProductCartItemViewModel

@{
    ViewData["Title"] = Localizer["CheckoutTitle"];
    var Products = Model.Products;
    var CartItems = Model.CartItems;
    var TotalPrice = CartItems.Sum(item => item.CartItemPrice);
}

<div class="container mt-4">
    <h2 class="text-center mb-4">@Localizer["CartAndCheckout"]</h2>

    @if (!CartItems.Any() || !Products.Any())
    {
        <div class="text-center">
            <h4 class="text-danger">@Localizer["NoProductFound"]</h4>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered table-hover">
                        <thead class="table-dark">
                            <tr class="text-center">
                                <th><input type="checkbox" id="selectAll" onclick="toggleAllItems()"></th>
                                <th>@Localizer["ProductName"]</th>
                                <th>@Localizer["Price"]</th>
                                <th>@Localizer["Quantity"]</th>
                                <th>@Localizer["TotalItemPrice"]</th>
                                <th>@Localizer["Action"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cartItem in CartItems)
                            {
                                var product = Products.FirstOrDefault(pro => pro.ProductId == cartItem.ProductId);
                                if (product == null) continue;
                                <tr class="text-center">
                                    <td>
                                        <input type="checkbox" class="cartItemCheckbox" value="@cartItem.CartItemId" onchange="updateTotal()">
                                    </td>
                                    <td>@product.ProductName</td>
                                    <td>@product.ProductPrice.ToString("#,##0") <u>đ</u></td>
                                    <td>@cartItem.CartItemQuantity</td>
                                    <td>@cartItem.CartItemPrice.ToString("#,##0") <u>đ</u></td>
                                    <td>
                                        <form method="post" asp-action="DeleteCartItem" asp-route-cartItemId="@cartItem.CartItemId">
                                            <button type="submit" class="btn btn-primary btn-sm">
                                                <i class="fas fa-edit"></i> @Localizer["Delete"]
                                            </button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card p-3 shadow-sm">
                    <h4 class="text-center">@Localizer["PaymentMethodTitle"]</h4>
                    <p><strong>@Localizer["TotalPrice"]:</strong> <span id="selectedTotalPrice">0 <u>đ</u></span></p>

                    <form id="paymentForm">
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery" checked>
                            <label class="form-check-label" for="cashOnDelivery">@Localizer["CashOnDelivery"]</label>
                        </div>
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="bankTransfer">
                            <label class="form-check-label" for="bankTransfer">@Localizer["BankTransfer"]</label>
                        </div>
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="creditCard">
                            <label class="form-check-label" for="creditCard">@Localizer["CreditCard"]</label>
                        </div>
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="vnpay">
                            <label class="form-check-label" for="vnpay">@Localizer["Vnpay"]</label>
                        </div>

                        <div class="form-group mt-3">
                            <label for="discountCode">@Localizer["DiscountCode"]:</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="discountCode" placeholder="@Localizer["EnterDiscountCode"]">
                                <button type="button" class="btn btn-primary" onclick="applyDiscount()">@Localizer["ApplyDiscount"]</button>
                            </div>
                            <small id="discountMessage" class="text-success"></small>
                        </div>

                        <hr>
                        <div class="d-grid">
                            <button type="button" class="btn btn-success" onclick="processPayment()">
                                <i class="fas fa-shopping-cart"></i> @Localizer["CheckoutButton"]
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
</div>

<script>
    let discountAmount = 0;

    async function applyDiscount() {
        const code = document.getElementById("discountCode").value.trim();

        if (!code) {
            alert("❌ Vui lòng nhập mã giảm giá.");
            return;
        }

        try {
            const response = await fetch('Customer/Coupon/ValidateCode', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ code: code })
            });

            if (!response.ok) {
                throw new Error("Mã giảm giá không hợp lệ!");
            }

            const data = await response.json();
            discountAmount = data.discountValue;

            document.getElementById("discountMessage").textContent = `✅ Áp dụng thành công! Giảm ${discountAmount.toLocaleString()} đ`;
            document.getElementById("discountMessage").classList.remove("text-danger");
            document.getElementById("discountMessage").classList.add("text-success");

            updateTotal();
        } catch (error) {
            document.getElementById("discountMessage").textContent = "❌ Mã giảm giá không hợp lệ!";
            document.getElementById("discountMessage").classList.add("text-danger");
        }
    }

    function updateTotal() {
        let localTotal = 0;

        document.querySelectorAll('.cartItemCheckbox:checked').forEach(checkbox => {
            let row = checkbox.closest('tr');
            let itemPrice = parseInt(row.cells[4].innerText.replace(/\D/g, ''), 10);
            localTotal += itemPrice;
        });

        let total = Math.max(0, localTotal - discountAmount);

        // Làm tròn số tiền đến hàng nghìn gần nhất
        total = Math.round(total / 1000) * 1000;

        document.getElementById('selectedTotalPrice').innerHTML = total.toLocaleString() + " <u>đ</u>";
    }

    function toggleAllItems() {
        const selectAllCheckbox = document.getElementById("selectAll");
        const checkboxes = document.querySelectorAll(".cartItemCheckbox");
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectAllCheckbox.checked;
        });
        updateTotal();
    }

    function processPayment() {
        alert("🛒 Đơn hàng đang được xử lý. Cảm ơn bạn đã mua sắm!");
    }
</script>
