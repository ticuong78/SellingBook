@model SellingBook.Models.BasicModels.Product
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Model.ProductName;
}

<style>
    .image-container {
        cursor: zoom-in;
        position: relative;
    }

    .image-container img {
        width: 100%;
        display: block;
    }

    .magnifier {
        position: absolute;
        width: 120px;
        height: 120px;
        border: 2px solid #000;
        border-radius: 50%;
        overflow: hidden;
        pointer-events: none;
        display: none;
        background: white;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    }

    .magnifier img {
        position: absolute;
        width: 200%; /* Adjust based on zoom factor */
    }
</style>

<div class="container mt-4">
    <div class="row">
        <!-- Product Image -->
        <div class="col-md-6">
            <div class="image-container" id="image-container">
                <img src="~/images/@Model.ImageUrl" class="rounded" alt="@Model.ProductName" id="main-image">
                <div class="magnifier" id="magnifier">
                    <img src="~/images/@Model.ImageUrl" alt="Zoomed Image" id="zoomed-image" class="rounded">
                </div>
            </div>
            <div class="mt-3">
                @if (Model.Images != null && Model.Images.Any())
                {
                    foreach (var img in Model.Images)
                    {
                                <img src="@img" class="img-thumbnail" width="80" alt="@Localizer["AlternateImage"]">
                    }
                }
            </div>
        </div>

        <!-- Product Details -->
        <div class="col-md-6">
            <h2>@Model.ProductName</h2>
            <h4 class="text-success">@Model.ProductPrice.ToString("#,##0") <u>đ</u></h4>

            @if (Model.Rate.HasValue)
            {
                    <p>⭐ @Model.Rate.Value/5 ( @Model.RateAmount @Localizer["Rating"] )</p>
            }

            <p><strong>@Localizer["Type"]: </strong>@Model.Category?.CategoryName</p>
            <p>@Model.Description</p>

            <!-- Quantity Selection -->
            <div class="d-flex align-items-center mb-3">
                <button class="btn btn-outline-secondary" onclick="changeQuantity(-1)">
                    @Localizer["Decrease"]
                </button>
                <input type="number" id="productQuantity" value="1" min="1" class="form-control text-center mx-2" style="width: 60px;">
                <button class="btn btn-outline-secondary" onclick="changeQuantity(1)">
                    @Localizer["Increase"]
                </button>
            </div>

            <button class="btn btn-primary" onclick="onClick(@Model.ProductId, @Model.ProductPrice)">
                @Localizer["AddToCart"]
            </button>
        </div>
    </div>
</div>

<script>
    function changeQuantity(amount) {
        let quantityInput = document.getElementById('productQuantity');
        let newQuantity = parseInt(quantityInput.value) + amount;
        if (newQuantity >= 1) {
            quantityInput.value = newQuantity;
        }
    }

    async function onClick(productId, productPrice) {
        const quantityInput = document.getElementById('productQuantity');
        const cartQuantitySelector = document.querySelector(".cart-quantity");

        const cartItemObj = {
            UserId: 1,
            ProductId: productId,
            CartItemQuantity: parseInt(quantityInput.value),
            CartItemPrice: parseInt(quantityInput.value) * productPrice
        };

        const onSuccessCallBack = async (response) => {
            const parsed_data = await response.json();
            if (parsed_data != null) {
                cartQuantitySelector.style.display = "block";
                cartQuantitySelector.innerText = parsed_data.cartQuantity;
            }
            console.log(parsed_data);
        };

        const onFailedCallBack = (error) => {
            console.log(error);
            cartQuantitySelector.style.display = "none";
        };

        // Send data to backend via AJAX
        await addProduct(cartItemObj, onSuccessCallBack, onFailedCallBack);
    }

    // Magnifier Effect
    const container = document.getElementById("image-container");
    const magnifier = document.getElementById("magnifier");
    const zoomedImage = document.getElementById("zoomed-image");
    const mainImage = document.getElementById("main-image");

    const zoomFactor = 2; // Điều chỉnh mức zoom

    // Đặt kích thước ảnh phóng đại dựa trên mức zoom
    zoomedImage.style.width = `${mainImage.naturalWidth * zoomFactor}px`;

    container.addEventListener("mousemove", function (event) {
        const rect = container.getBoundingClientRect();
        let x = event.clientX - rect.left;
        let y = event.clientY - rect.top;

        // Cập nhật vị trí kính lúp (không giới hạn trong ảnh nữa)
        magnifier.style.left = `${x - magnifier.offsetWidth / 2}px`;
        magnifier.style.top = `${y - magnifier.offsetHeight / 2}px`;
        magnifier.style.display = "block";

        // Tính vị trí ảnh phóng đại
        const scaleX = zoomedImage.width / rect.width;
        const scaleY = zoomedImage.height / rect.height;

        zoomedImage.style.left = `${-x * scaleX + magnifier.offsetWidth / 2}px`;
        zoomedImage.style.top = `${-y * scaleY + magnifier.offsetHeight / 2}px`;
    });

    container.addEventListener("mouseleave", function () {
        magnifier.style.display = "none";
    });
</script>
